[{"/home/alexdolls/Desktop/check_is_working/frontend/src/index.js":"1","/home/alexdolls/Desktop/check_is_working/frontend/src/App.js":"2","/home/alexdolls/Desktop/check_is_working/frontend/src/reportWebVitals.js":"3","/home/alexdolls/Desktop/check_is_working/frontend/src/react_interface.js":"4","/home/alexdolls/Desktop/check_is_working/frontend/src/UsersService.js":"5"},{"size":518,"mtime":1648567106991,"results":"6","hashOfConfig":"7"},{"size":528,"mtime":1648562471016,"results":"8","hashOfConfig":"7"},{"size":362,"mtime":1648562471016,"results":"9","hashOfConfig":"7"},{"size":19854,"mtime":1648597692754,"results":"10","hashOfConfig":"7"},{"size":1830,"mtime":1648597380208,"results":"11","hashOfConfig":"7"},{"filePath":"12","messages":"13","suppressedMessages":"14","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},"2kt58w",{"filePath":"16","messages":"17","suppressedMessages":"18","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"19","messages":"20","suppressedMessages":"21","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"15"},{"filePath":"22","messages":"23","suppressedMessages":"24","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"25"},{"filePath":"26","messages":"27","suppressedMessages":"28","errorCount":0,"fatalErrorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"29","usedDeprecatedRules":"15"},"/home/alexdolls/Desktop/check_is_working/frontend/src/index.js",[],[],["30","31"],"/home/alexdolls/Desktop/check_is_working/frontend/src/App.js",[],[],"/home/alexdolls/Desktop/check_is_working/frontend/src/reportWebVitals.js",[],[],"/home/alexdolls/Desktop/check_is_working/frontend/src/react_interface.js",["32","33"],[],"import React from 'react';\nimport UsersService, {GroupsService}  from  './UsersService';\n\n\n\nconst default_user_password = \"12345678\"\n\nconsole.log(React.version)\n\nconst usersService  =  new UsersService();\nconst groupsService = new GroupsService();\n\nclass Layout extends React.Component {\n \tconstructor(props){\n  \t\tsuper(props);\n \t\tthis.state = {users: \"active\", groups: \"\", table: React.createElement(UsersTable)};\n \t\tthis.handleClick = this.handleClick.bind(this);\n \t}\n\trender(){\n\t\treturn React.createElement(\n\t\t\t\"div\",\n\t\t\t{},\n\t\tReact.createElement(\n\t\t\t\"ul\",\n\t\t\t{\n\t\t\t\tclassName: \"nav nav-tabs\",\n\t\t\t},\n\t\t\tReact.createElement(\n\t\t\t\t\"li\",\n\t\t\t\t{\n\t\t\t\t\tclassName: \"nav-item\",\n\t\t\t\t},\n\t\t\t\tReact.createElement(\n\t\t\t\t\t\"button\",\n\t\t\t\t\t{\n\t\t\t\t\t\tclassName: \"nav-link\" + \" \" + this.state.users,\n\t\t\t\t\t\tonClick: this.handleClick,\n\t\t\t\t\t},\n\t\t\t\t\t\"Users\"\n\t\t\t\t),\n\t\t\t),\n\t\t\tReact.createElement(\n                                \"li\",\n                                {\n                                        className: \"nav-item\",\n                                },\n                                React.createElement(\n                                        \"button\",\n                                        {\n                                                className: \"nav-link\" + \" \" + this.state.groups,\n\t\t\t\t\t\tonClick: this.handleClick,\n                                        },\n                                        \"Groups\"\n                                ),\n                        ),\n\t\t),\n\t\tthis.state.table\n\t)\n\t}\n\thandleClick(e) {\n\t\tif (e.target.innerHTML === \"Users\"){\n\t\t\tthis.setState({\n\t\t\t\tusers: \"active\",\n\t\t\t\tgroups: \"\",\n\t\t\t\ttable: React.createElement(UsersTable)\n\t\t\t})\n\t\t} else if (e.target.innerHTML === \"Groups\"){\n\t\t\tthis.setState({\n\t\t\t\tusers: \"\",\n\t\t\t\tgroups: \"active\",\n\t\t\t\ttable: React.createElement(GroupsTable)\n\t\t\t})\n\t\t}\n\t}\n}\nclass UsersTable extends React.Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.handleClickDelete = this.handleClickDelete.bind(this);\n\t\tthis.handleClickEdit = this.handleClickEdit.bind(this);\n\t\tthis.handleClickAddUser = this.handleClickAddUser.bind(this)\n\t\tthis.state = {users: [], groups: [],user_id_edit: \"none\"};\n\t}\n\t\n\tget_group_name(group_id){\n\t\tvar result = \"\";\n\t\tfor (var i = 0; i < this.state.groups.length; i++) {\n\t\t\tif ((\"\" + group_id) === (\"\" + this.state.groups[i].id)){\n\t\t\t\tresult = \"\" + this.state.groups[i].name;\n\t\t\t}\n\t\t}\n\t\treturn result;\n\t}\n\n\tget_users(){\n\tusersService.getUsers()\n\t\t.then((result) => {\n\t\t\tthis.setState({\n                                        users:result.data,\n                                        user_id_edit: \"none\",\n                                });\n\t\t});\n        }\n\n\tget_groups(){\n\tgroupsService.getGroups()\n\t\t.then((result) => {\n\t\t\tthis.setState({\n                                        groups: result.data,\n                                });\n\t\t});\n        }\n\n\t\n\tcomponentDidMount() {\n\t\tthis.get_users();\n\t\tthis.get_groups();\n\t}\n\n\trender(){\n\t\treturn React.createElement(\n\t\t\t\"div\",\n\t\t\t{},\n\t\t\tReact.createElement(\n\t\t\t\"table\",\n\t\t\t{\n\t\t\t\tclassName:\"table table-striped\",\n\t\t\t\tstyle: {\n\t\t\t\t\ttextAlign:\"center\",\n\t\t\t\t}\n\t\t\t},\n\t\t\tReact.createElement(\n\t\t\t\t\"thead\",\n\t\t\t\t{},\n\t\t\t\tReact.createElement(\n\t\t\t\t\t\"tr\",\n\t\t\t\t\t{},\n\t\t\t\t\tReact.createElement(\"th\", {scope:\"col\"}, \"ID\"),\n\t\t\t\t\tReact.createElement(\"th\", {scope:\"col\"}, \"username\"),\n\t\t\t\t\tReact.createElement(\"th\", {scope:\"col\"}, \"created\"),\n\t\t\t\t\tReact.createElement(\"th\", {scope:\"col\"}, \"group\"),\n\t\t\t\t\tReact.createElement(\"th\", {scope:\"col\"}, \"actions\"),\n\t\t\t\t)\n\t\t\t),\n\t\t\tReact.createElement(\n\t\t\t\t\"tbody\",\n\t\t\t\t{},\n\t\t\t\tthis.state.users.map(user => (\n\t\t\t\tReact.createElement(\n\t\t\t\t\t\"tr\",\n\t\t\t\t\t\"null\",\n\t\t\t\t\tReact.createElement(\"th\", {scope:\"row\"}, user.id),\n\t\t\t\t\tReact.createElement(\"td\", {scope:\"col\"},\n\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\"div\",\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\tid: \"username\" + user.id,\n\t\t\t\t\t\t\t\tstyle:{wordWrap: \"break-word\"}\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\tthis.give_edit_element(user.username, user.id),\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t\tReact.createElement(\"td\", {scope:\"col\"}, user.date_joined),\n\t\t\t\t\tReact.createElement(\"td\", {scope:\"col\"},\n\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\"div\",\n\t\t\t\t\t\t\t{id: \"selectgroups\" + user.id},\n\t\t\t\t\t\t\tthis.give_select_element(user.id, user.groups)\n\t\t\t\t\t\t)\n\t\t\t\t\t),\n\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\"td\",\n\t\t\t\t\t\t{\n\t\t\t\t\t\t\tscope:\"col\"\n\t\t\t\t\t\t},\n\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\"button\",\n\t\t\t\t\t\t\t{\n\t\t\t\t\t\t\t\ttype: \"button\",\n\t\t\t\t\t\t\t\tid: \"del\" + user.id,\n\t\t\t\t\t\t\t\tvalue: user.id,\n\t\t\t\t\t\t\t\tonClick: this.handleClickDelete,\n\t\t\t\t\t\t\t\tclassName: \"btn btn-danger\",\n\t\t\t\t\t\t\t},\n\t\t\t\t\t\t\t\"Delete\"\n\t\t\t\t\t\t),\n\t\t\t\t\t\tthis.give_edit_button(user.id),\n\t\t\t\t\t\t),\n\t\t\t\t)\n\t\t\t\t)),\n\t\t\t)\n\t\t),\n\t\tReact.createElement(\n                        \"div\",\n                        {style:{padding: \"10px\"}},\n                        React.createElement(\n                                \"button\",\n                                {\n                                        type: \"button\",\n                                        style: {marginRight: \"10px\", height: \"\"},\n                                        onClick: this.handleClickAddUser,\n                                        className: \"btn btn-outline-success\"\n                                },\n                                \"Add User\"\n                        ),\n                        React.createElement(\"input\",\n                                {\n                                        type:\"text\",\n                                        id: \"addUserUsername\",\n                                        placeholder:\"Username\",\n\t\t\t\t\tonKeyPress: this.handleKeyPressAddUser,\n                                        style: {marginRight:\"10px\"},\n                                }\n                        ),\n                        React.createElement(\n                                \"select\",\n                                {\n                                        id: \"groupSelect\",\n\t\t\t\t\tonKeyPress: this.handleKeyPressAddUser,\n                                },\n\t\t\t\tReact.createElement(\"option\", {value: \"\"}, \"None\"),\n                                this.state.groups.map(group => (\n                                        React.createElement(\n                                                \"option\",\n                                                {\n                                                        value:group.id,\n                                                        key: group.id\n                                                },\n                                                group.name\n                                        )\n                                ))\n                        )\n                )\n\n)\n\t}\n\tgive_select_element(user_id, groups) {\n\t\tif ((user_id + \"\")  === this.state.user_id_edit) {\n                return React.createElement(\n                        \"select\",\n                        {\n                                id: \"editselectgroup\" + user_id,\n                        },\n\t\t\tReact.createElement(\"option\", { value: \"\" }, \"None\"),\n\t\t\tthis.state.groups.map(group => (\n\t\t\t\tReact.createElement(\n\t\t\t\t\t\"option\",\n\t\t\t\t\t{\n\t\t\t\t\t\tvalue: group.id,\n\t\t\t\t\t\tkey: group.id\n\t\t\t\t\t},\n\t\t\t\t\tgroup.name\n\t\t\t\t)\n\t\t\t))\n                )\n        }\n                else{\n                \treturn this.get_group_name(groups);\n                }\n\n\t}\n\n\tgive_edit_element(username, user_id){\n\t\tif ((user_id + \"\")  === this.state.user_id_edit) {\n\t\treturn React.createElement(\n\t\t\t\"input\",\n\t\t\t{\n\t\t\t\ttype: \"text\",\n\t\t\t\tclassName: \"form-control\",\n\t\t\t\tid: \"input\" + user_id,\n\t\t\t\tdefaultValue: username\n\t\t\t}\n\t\t)\n\t}\n\t\telse{\n\t\treturn username\n\t\t}\n\t}\n\tgive_edit_button(user_id){\n\t\tvar btnclass = \"btn btn-info\"\n\t\tvar btntext = \"Edit\"\n\t\tif ((user_id + \"\")  === this.state.user_id_edit) {\n\t\t\tbtnclass = \"btn btn-success\"\n\t\t\tbtntext = \"Confirm\"\n        }\n                return React.createElement(\n                                \"button\",\n                                {\n                                        type: \"button\",\n                                        className: btnclass,\n                                        id: \"edit\" + user_id,\n                                        value: user_id,\n                                        onClick: this.handleClickEdit,\n                                        style: {marginLeft: \"10px\"}\n                                },\n                                btntext\n                        )\n\n\t}\n\t\n\thandleKeyPressAddUser = (event) => {\n\t\tif(event.key === \"Enter\"){\n\t\t\tthis.handleClickAddUser(event);\n\t\t}\n\t}\n\n\thandleClickDelete(e) {\n\t\tusersService.removeUser(e.target.value)\n\t\t\t.then((result) => {\n\t\t\t\tthis.get_users();\n                                console.log(result.data.detail)\n\t\t\t});\n\t}\n\n\thandleClickEdit(e) {\n\t\tif ((\"\" + e.target.value) === \"\" + (this.state.user_id_edit)){\n\t\t\tconst new_username = document.querySelector(\"#input\" + e.target.value).value\n\t\t\tconst group_select_dom = document.querySelector('#editselectgroup' + e.target.value);\n\t\t\tconst group_id = group_select_dom.options[group_select_dom.selectedIndex].value\n\t\t\tconsole.log(\"Group ID = \" + group_id)\n\n\t\t\tusersService.updateUserGroup(e.target.value, group_id)\n\t\t\t\t.then((result_group) => {\n\t\t\t\t\tusersService.updateUserUsername(e.target.value, new_username)\n                                \t\t.then((result_username) => {\n                                        \t\tthis.get_users();\n\t\t\t\t\t\t\tif (result_group.data.detail)\n\t\t\t\t\t\t\t\tconsole.log(result_group.data.detail)\n\t\t\t\t\t\t\tif (result_group.data.error)\n\t\t\t\t\t\t\t\talert(result_group.data.error)\n\t\t\t\t\t\t\tif (result_username.data.detail)\n\t\t\t\t\t\t\t\tconsole.log(result_username.data.detail)\n\t\t\t\t\t\t\tif (result_username.data.error)\n\t\t\t\t\t\t\t\talert(result_username.data.error)\n                                \t\t});\n\t\t\t\t});\n\t\t}else{\n\t\tthis.setState({\n\t\t\tuser_id_edit: \"\" + e.target.value\n\t\t});\n\t\t}\n\t}\n\thandleClickAddUser(e) {\n                const username_input_dom = document.querySelector('#addUserUsername');\n                const group_select_dom = document.querySelector('#groupSelect');\n                const username = username_input_dom.value + \"\";\n                const group_id = group_select_dom.options[group_select_dom.selectedIndex].value\n\n\t\tusersService.createUser(username, default_user_password, group_id)\n\t\t\t.then((result) => {\n\t\t\t\tthis.get_users();\n\t\t\t\tif (result.data.error)\n                                \talert(result.data.error)\n                                else\n                                        console.log(result.data.detail)\n\t\t\t\t});\n        }\n}\n\nclass GroupsTable extends React.Component {\n\tconstructor(props){\n\t\tsuper(props);\n\t\tthis.handleClickEdit = this.handleClickEdit.bind(this);\n\t\tthis.handleClickDelete = this.handleClickDelete.bind(this);\n\t\tthis.handleClickAddGroup = this.handleClickAddGroup.bind(this);\n\t\tthis.state = {\n\t\t\tgroups: [],\n\t\t\tgroup_id_edit: \"none\",\n\t\t};\n\t}\n\n        get_groups(){\n\t\tgroupsService.getGroups()\n\t\t\t.then((result) => {\n\t\t\t\tthis.setState({\n                                        groups: result.data,\n                                        group_id_edit: \"none\",\n                                });\n\t\t\t});\n        }\n\n        componentDidMount() {\n                this.get_groups();\n        }\n\n\trender(){\n\t\treturn React.createElement(\n\t\t\t\"div\",\n\t\t\t{},\n\t\tReact.createElement(\n\t\t\t\"table\",\n\t\t\t{\n\t\t\t\tclassName: \"table table-striped\",\n\t\t\t\tstyle: {textAlign: \"center\"},\n\t\t\t},\n\t\t\tReact.createElement(\n\t\t\t\t\"thead\",\n\t\t\t\t{},\n\t\t\t\tReact.createElement(\n\t\t\t\t\t\"tr\",\n\t\t\t\t\t{},\n\t\t\t\t\tReact.createElement(\"th\", {scope:\"col\"}, \"ID\"),\n\t\t\t\t\tReact.createElement(\"th\", {scope:\"col\"}, \"Name\"),\n\t\t\t\t\tReact.createElement(\"th\", {scope:\"col\"}, \"Description\"),\n\t\t\t\t\tReact.createElement(\"th\", {scope:\"col\"}, \"Actions\"),\n\t\t\t\t)\n\t\t\t),\n\t\t\tReact.createElement(\n\t\t\t\t\"tbody\",\n\t\t\t\t{},\n\t\t\t\tthis.state.groups.map(group => (\n\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\"tr\",\n\t\t\t\t\t\t{},\n\t\t\t\t\t\tReact.createElement(\"th\", {scope:\"row\"}, group.id),\n\t\t\t\t\t\tReact.createElement(\"td\", {}, this.give_edit_element(group.name, group.id)),\n\t\t\t\t\t\tReact.createElement(\"td\", {}, this.give_edit_desc(group.description, group.id)),\n\t\t\t\t\t\tReact.createElement(\n\t\t\t\t\t\t\t\"td\",\n\t\t\t\t\t\t\t{},\n\t\t\t\t\t\t\tReact.createElement(\n                                                \"div\",\n                                                {},\n                                                React.createElement(\n                                                        \"button\",\n                                                        {\n                                                                type: \"button\",\n                                                                id: \"del\" + group.id,\n                                                                value: group.id,\n                                                                onClick: this.handleClickDelete,\n                                                                className: \"btn btn-danger\",\n                                                        },\n                                                        \"Delete\"\n                                                ),\n                                                this.give_edit_button(group.id),\n                                                ),\n\t\t\t\t\t\t)\n\t\t\t\t\t)\n\t\t\t\t))\n\t\t\t)\n\t\t),\n\t\t\tReact.createElement(\n                                                \"div\",\n                                                {style:{padding: \"10px\"}},\n                                                React.createElement(\n                                                        \"button\",\n                                                        {\n                                                                type: \"button\",\n                                                                style: {marginRight: \"10px\", height: \"\"},\n                                                                onClick: this.handleClickAddGroup,\n                                                                className: \"btn btn-outline-success\"\n                                                        },\n                                                        \"Add Group\"\n                                                ),\n                                                React.createElement(\n\t\t\t\t\t\t\t\"input\",\n                                                        {\n                                                                type:\"text\",\n                                                                id: \"newGroupName\",\n                                                                placeholder:\"Name\",\n\t\t\t\t\t\t\t\tonKeyPress: this.handleKeyPressAddGroup,\n                                                                style: {marginRight:\"10px\"},\n                                                        }\n                                                ),\n                                                React.createElement(\n                                                        \"input\",\n                                                        {       type: \"text\",\n                                                                id: \"newGroupDesc\",\n\t\t\t\t\t\t\t\tonKeyPress: this.handleKeyPressAddGroup,\n                                                                placeholder: \"Description\",\n                                                        },\n                                                )\n                                        )\n\n\t\t)\n\t}\n\n\tgive_edit_desc(name, group_id){\n                if ((group_id + \"\")  === this.state.group_id_edit) {\n                return React.createElement(\n                        \"input\",\n                        {\n                                type: \"text\",\n                                id: \"inputdesc\" + group_id,\n                                defaultValue: name\n                        }\n                )\n        }\n                else{\n                return name\n                }\n        }\n\n\tgive_edit_element(name, group_id){\n                if ((group_id + \"\")  === this.state.group_id_edit) {\n                return React.createElement(\n                        \"input\",\n                        {\n                                type: \"text\",\n                                id: \"inputname\" + group_id,\n                                defaultValue: name\n                        }\n                )\n        }\n                else{\n                return name\n                }\n        }\n\n        give_edit_button(group_id){\n                var btnclass = \"btn btn-info\"\n                var btntext = \"Edit\"\n                if ((group_id + \"\")  === this.state.group_id_edit) {\n                        btnclass = \"btn btn-success\"\n                        btntext = \"Confirm\"\n        }\n                return React.createElement(\n                                \"button\",\n                                {\n                                        type: \"button\",\n                                        className: btnclass,\n                                        id: \"edit\" + group_id,\n                                        value: group_id,\n                                        onClick: this.handleClickEdit,\n                                        style: {marginLeft: \"10px\"}\n                                },\n                                btntext\n                        )\n\n        }\n\n\thandleKeyPressAddGroup = (event) => {\n\t  if(event.key === 'Enter'){\n\t\tthis.handleClickAddGroup(event);\n\t  }\n\t}\t\n\t\n\thandleClickAddGroup(e) {\n\t\tvar add_group_name = document.querySelector(\"#newGroupName\").value\n\t\tvar add_group_desc = document.querySelector(\"#newGroupDesc\").value\n\n\t\tgroupsService.createGroup(add_group_name, add_group_desc)\n\t\t\t.then((result) => {\n\t\t\t\tthis.get_groups();\n                                        if (result.data.error)\n                                                alert(result.data.error)\n                                        else\n                                                console.log(result.data.detail)\n\t\t\t});\n\t}\n\t\n\thandleClickDelete(e) {\n\t\tvar group_id = e.target.value\n\t\tgroupsService.removeGroup(group_id)\n\t\t\t.then((result) => {\n\t\t\t\tthis.get_groups();\n                                        if (result.data.error)\n                                                alert(result.data.error)\n                                        else\n                                                console.log(result.data.detail)\n\t\t\t});\n\t\t}\n\t\n\thandleClickEdit(e) {\n                if ((\"\" + e.target.value) === \"\" + (this.state.group_id_edit)){\n                        const group_name = document.querySelector(\"#inputname\" + e.target.value).value\n\t\t\tconst group_desc = document.querySelector(\"#inputdesc\" + e.target.value).value\n\n                       \tgroupsService.updateGroupDesc(e.target.value, group_desc)\n                                .then((result_desc) => {\n                                        groupsService.updateGroupName(e.target.value, group_name)\n                                                .then((result_name) => {\n\t\t\t\t\t\t\tconsole.log(result_desc)\n                                                        this.get_groups();\n                                                        if (result_desc.data.error)\n                                                                alert(result_desc.data.error);\n                                                        else\n                                                                console.log(result_desc.data.detail);\n\n                                                        if (result_name.data.error)\n                                                                alert(result_name.data.error);\n                                                        else\n                                                                console.log(result_name.data.detail);\n                                                });\n                                });\n \n                }else{\n                this.setState({\n                        group_id_edit: \"\" + e.target.value\n                });\n                }\n        }\n\n\n}\n\nexport default Layout;\n","/home/alexdolls/Desktop/check_is_working/frontend/src/UsersService.js",["34","35"],[],"import axios from 'axios';\nconst API_URL = 'http://127.0.0.1:8000/userslist';\n\nexport default class UserssService{\n\t\n\tconstructor(){}\n\n\tgetUsers(){\n                const url = `${API_URL}/api/users/`;\n                return axios.get(url);\n        }\n\tupdateUserUsername(customer_id, username){\n\t\tconst url = `${API_URL}/api/users/${customer_id}/change/username/?username=${username}`;\n\t\treturn axios.get(url);\n\t}\n\tupdateUserGroup(customer_id, group_id){\n\t\tconst url = `${API_URL}/api/users/${customer_id}/change/addgroup/?group_id=${group_id}`;\n\t\treturn axios.get(url);\n\t}\n\tcreateUser(username, password, group_id){\n                const url = `${API_URL}/api/users/create/${username}/${password}/?group_id=${group_id}`;\n                return axios.get(url);\n        }\n\tremoveUser(user_id){\n                const url = `${API_URL}/api/users/${user_id}/remove/`;\n                return axios.get(url);\n        }\n}\n\nexport class GroupsService{\n\tconstructor(){}\n\n\tgetGroups(){\n                const url = `${API_URL}/api/groups/`;\n                return axios.get(url);\n        }\n\tcreateGroup(group_name, group_desc){\n\t\tif (group_desc === \"\")\n\t\t\tgroup_desc = \" \"\n\t\tconst url = `${API_URL}/api/groups/create/${group_name}/${group_desc}/`\n\t\treturn axios.get(url);\n\t}\n\tremoveGroup(group_id){\n                const url = `${API_URL}/api/groups/${group_id}/remove/`\n                return axios.get(url);\n        }\n\tupdateGroupDesc(group_id, group_desc) {\n\t\tif (group_desc === \"\")  \n                        group_desc = \" \"\n\t\tconst url = `${API_URL}/api/groups/${group_id}/change/groupdesc/${group_desc}/`\n                return axios.get(url);\n\t}\n\tupdateGroupName(group_id, group_name) {\n                const url = `${API_URL}/api/groups/${group_id}/change/groupname/${group_name}/`\n                return axios.get(url);\n        }\n\n}\n",{"ruleId":"36","replacedBy":"37"},{"ruleId":"38","replacedBy":"39"},{"ruleId":"40","severity":1,"message":"41","line":36,"column":29,"nodeType":"42","messageId":"43","endLine":36,"endColumn":30},{"ruleId":"40","severity":1,"message":"41","line":50,"column":71,"nodeType":"42","messageId":"43","endLine":50,"endColumn":72},{"ruleId":"44","severity":1,"message":"45","line":6,"column":2,"nodeType":"46","messageId":"47","endLine":6,"endColumn":17},{"ruleId":"44","severity":1,"message":"45","line":31,"column":2,"nodeType":"46","messageId":"47","endLine":31,"endColumn":17},"no-native-reassign",["48"],"no-negated-in-lhs",["49"],"no-useless-concat","Unexpected string concatenation of literals.","BinaryExpression","unexpectedConcat","no-useless-constructor","Useless constructor.","MethodDefinition","noUselessConstructor","no-global-assign","no-unsafe-negation"]